package com.javaman.madax.shorts.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.ResourceRegion;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRange;
import org.springframework.http.MediaType;
import org.springframework.http.MediaTypeFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class VodController {
	
	@Value("${my.video.location}")
	private String folderPath;
	
	@ResponseBody
	@GetMapping("vod/{filename}")
	public ResponseEntity<Resource> resource(@PathVariable String filename,
										@RequestHeader HttpHeaders headers) throws IOException{
		
		String Path = folderPath + "/" + filename;
		Resource resource = new FileSystemResource(Path);
		
		long chunkSize = 1024*1024;
		long contentLength = resource.contentLength();
		
		HttpRange httpRange = headers.getRange().stream().findFirst().orElse(HttpRange.createByteRange(0,contentLength - 1));
		
		long rangeLength = calculateRangeLength(httpRange, contentLength, chunkSize);
		ResourceRegion region = new ResourceRegion(resource, httpRange.getRangeStart(contentLength), rangeLength);
		return ResponseEntity.ok()
                .contentType(MediaTypeFactory.getMediaType(resource).orElse(MediaType.APPLICATION_OCTET_STREAM))
                .contentLength(resource.contentLength())
                .body(resource);
	}

	private long calculateRangeLength(HttpRange httpRange, long contentLength, long chunkSize) {
		long start = httpRange.getRangeStart(contentLength);
		long end = httpRange.getRangeEnd(contentLength);
		return Long.min(chunkSize, end - start + 1);
	}
	
	
	
}
